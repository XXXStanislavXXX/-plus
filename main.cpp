#include <iostream>
#include <string>

/*
5. Из обычных чисел — в римские (дополнительное задание)
Что нужно сделать
Напишите программу, которая переводит данное пользователем число в римскую
запись. Например, 19 в римской записи — XIX.

Римскую запись числа можно получить, если следовать правилам:

Сначала в ней идут буквы, обозначающие количество тысяч в числе.
Затем идут буквы, обозначающие количество сотен, затем буквы, обозначающие
количество десятков, и в конце — буквы, обозначающие количество единиц.
Для записи используются следующие буквы: 1 — I, 5 — V, 10 — X, 50 — L, 100 — C,
500 — D и 1000 — M.
Число получается как сумма значений использованных в нём букв, за тем
исключением, что если буква с меньшим значением идёт перед буквой с большим
значением, то её значение вычитается из значения числа.
Вычитание используется, только когда надо передать цифру 4 или 9, в остальных
случаях используется сложение. Например, 9 обозначается как IX, 40 — как XL.
В числе запрещено писать более трёх одинаковых букв подряд. Таким образом,
максимальное число, которое можно записать по этим правилам, — 3999.
Программе на вход даётся целое число из диапазона от 1 до 3999. Вы можете
считывать его как число или как строку, если так удобнее.

Программа должна вывести римскую запись данного числа.
*/

int main()
{
    int number;
    std::cout << "Enter a number between 1 and 3999: ";
    std::cin >> number;

    while (number < 1 || number > 3999)
    {
        std::cout << "Number out of range." << std::endl;
        std::cout << "Enter a number between 1 and 3999: ";
        std::cin >> number;
    }

    std::string roman;
    const std::pair<int, std::string> romanNumerals[] = {
        {1000, "M"}, {900, "CM"}, {500, "D"}, {400, "CD"}, {100, "C"}, {90, "XC"}, {50, "L"}, {40, "XL"}, {10, "X"}, {9, "IX"}, {5, "V"}, {4, "IV"}, {1, "I"}}; // Вот тут без словаря вообще не представляю как делать

    for (const auto & pair : romanNumerals)
    {
        while (number >= pair.first)
        {
            roman += pair.second;
            number -= pair.first;
        }
    }

    std::cout << "Roman numeral: " << roman << std::endl;

    return 0;
}