#include <iostream>
#include <cmath>

/*
Задание 2. Immolate Improved!
Что нужно сделать
Мы придумываем фэнтезийную онлайн-игру в жанре RPG. В орка стреляют
огненными шарами разной степени мощности, но у него есть очки здоровья и
показатель сопротивляемости магии. Очки здоровья, сопротивляемость магии и
мощность огненного шара — это вещественные числа от нуля до единицы
включительно. Чем больше мощность, тем больше урон здоровью, но чем больше
сопротивляемость магии, тем урон меньше. Например, если сопротивляемость
равна нулю (0%), то будет нанесён урон, равный мощности огненного шара.
Если сопротивляемость равна единице (100%), урон будет равен нулю, даже
если мощность заклинания максимальна.

Напишите программу, в которой пользователь сначала задаёт количество здоровья
и сопротивляемость магии орка, а после стреляет в него огненными шарами разной
мощности, пока орк не погибнет. Мощность удара вводится с клавиатуры с каждым
выстрелом. После каждого заклинания программа выводит на экран итоговый урон
от удара и оставшиеся очки здоровья орка. Показатель сопротивляемости магии
не изменяется при попадании. Обеспечьте контроль ввода.

Обратите внимание, что сопротивляемость обозначает только долю от повреждения,
которая приходится на орка. Пример:

Урон 0.1, сопротивляемость 0.5, по орку будет нанесено 0.05 урона.

Урон 0.2, сопротивляемость 0.5, по орку будет нанесено 0.1 урона.

Урон 1, сопротивляемость 0.2, по орку будет нанесено 0.8 урона.
*/

int main()
{
    bool isAlive = true;

    float health, resistance, damage;
    std::cout << "Enter the health points (0 to 1): ", std::cin >> health;

    std::cout << "Enter the resistance (0 to 1): ", std::cin >> resistance;

    while (health > 1 || health < 0)
    {
        std::cout << "Invalid health points. Enter again (0 to 1): ", std::cin >> health;
    }

    while (resistance > 1 || resistance < 0)
    {
        std::cout << "Invalid resistance. Enter again (0 to 1): ", std::cin >> resistance;
    }

    while (isAlive)
    {
        std::cout << "Enter the damage (0 to 1): ", std::cin >> damage;

        while (damage > 1 || damage < 0)
        {
            std::cout << "Invalid damage. Enter again (0 to 1): ", std::cin >> damage;
        }

        float finalDamage = damage * (1 - resistance);
        health -= finalDamage;

        if (health <= 0)
        {
            isAlive = false;
            std::cout << "The orc is dead." << std::endl;
        }
        else
        {
            std::cout << "Damage dealt: " << finalDamage << ", Remaining health: " << health << std::endl;
        }
    }

    return 0;
}